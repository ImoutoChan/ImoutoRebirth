// <auto-generated />
using System;
using ImoutoRebirth.Lilin.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ImoutoRebirth.Lilin.DataAccess.Migrations
{
    [DbContext(typeof(LilinDbContext))]
    [Migration("20220114132233_AddIndexOnAddedOn")]
    partial class AddIndexOnAddedOn
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ImoutoRebirth.Lilin.DataAccess.Entities.FileTagEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Instant>("AddedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Instant>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Source")
                        .HasColumnType("integer");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddedOn");

                    b.HasIndex("FileId");

                    b.HasIndex("TagId");

                    b.HasIndex("Source", "TagId");

                    b.HasIndex("TagId", "Value");

                    b.HasIndex("FileId", "TagId", "Source");

                    b.ToTable("FileTags");
                });

            modelBuilder.Entity("ImoutoRebirth.Lilin.DataAccess.Entities.NoteEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Instant>("AddedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Instant>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PositionFromLeft")
                        .HasColumnType("integer");

                    b.Property<int>("PositionFromTop")
                        .HasColumnType("integer");

                    b.Property<int>("Source")
                        .HasColumnType("integer");

                    b.Property<int?>("SourceId")
                        .HasColumnType("integer");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("ImoutoRebirth.Lilin.DataAccess.Entities.TagEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Instant>("AddedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Count")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<bool>("HasValue")
                        .HasColumnType("boolean");

                    b.Property<Instant>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Synonyms")
                        .HasColumnType("text");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("TypeId", "Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("ImoutoRebirth.Lilin.DataAccess.Entities.TagTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Instant>("AddedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Color")
                        .HasColumnType("integer");

                    b.Property<Instant>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TagTypes");
                });

            modelBuilder.Entity("ImoutoRebirth.Lilin.DataAccess.Entities.FileTagEntity", b =>
                {
                    b.HasOne("ImoutoRebirth.Lilin.DataAccess.Entities.TagEntity", "Tag")
                        .WithMany("FileTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ImoutoRebirth.Lilin.DataAccess.Entities.TagEntity", b =>
                {
                    b.HasOne("ImoutoRebirth.Lilin.DataAccess.Entities.TagTypeEntity", "Type")
                        .WithMany("Tags")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("ImoutoRebirth.Lilin.DataAccess.Entities.TagEntity", b =>
                {
                    b.Navigation("FileTags");
                });

            modelBuilder.Entity("ImoutoRebirth.Lilin.DataAccess.Entities.TagTypeEntity", b =>
                {
                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
