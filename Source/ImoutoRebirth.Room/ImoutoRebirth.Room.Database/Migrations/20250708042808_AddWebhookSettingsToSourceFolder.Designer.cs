// <auto-generated />
using System;
using ImoutoRebirth.Room.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ImoutoRebirth.Room.Database.Migrations
{
    [DbContext(typeof(RoomDbContext))]
    [Migration("20250708042808_AddWebhookSettingsToSourceFolder")]
    partial class AddWebhookSettingsToSourceFolder
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ImoutoRebirth.Room.Database.Entities.CollectionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Instant>("AddedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Instant>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("ImoutoRebirth.Room.Database.Entities.CollectionFileEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Instant>("AddedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean");

                    b.Property<string>("Md5")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<Instant>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OriginalPath")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IsRemoved");

                    b.HasIndex("Md5");

                    b.HasIndex("Path");

                    b.HasIndex("CollectionId", "Md5", "IsRemoved")
                        .IsUnique()
                        .HasFilter("NOT \"IsRemoved\"");

                    b.ToTable("CollectionFiles");
                });

            modelBuilder.Entity("ImoutoRebirth.Room.Database.Entities.DestinationFolderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Instant>("AddedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("FormatErrorSubfolder")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("!FormatError");

                    b.Property<string>("HashErrorSubfolder")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("!HashError");

                    b.Property<Instant>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ShouldCreateSubfoldersByHash")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShouldRenameByHash")
                        .HasColumnType("boolean");

                    b.Property<string>("WithoutHashErrorSubfolder")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("!WithoutHashError");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId")
                        .IsUnique();

                    b.ToTable("DestinationFolders");
                });

            modelBuilder.Entity("ImoutoRebirth.Room.Database.Entities.SourceFolderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Instant>("AddedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsWebhookUploadEnabled")
                        .HasColumnType("boolean");

                    b.Property<Instant>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ShouldAddTagFromFilename")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShouldCheckFormat")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShouldCheckHashFromName")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShouldCreateTagsFromSubfolders")
                        .HasColumnType("boolean");

                    b.Property<string>("WebhookUploadUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("_supportedExtensions")
                        .HasColumnType("text")
                        .HasColumnName("SupportedExtensions");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId");

                    b.ToTable("SourceFolders");
                });

            modelBuilder.Entity("ImoutoRebirth.Room.Database.Entities.CollectionFileEntity", b =>
                {
                    b.HasOne("ImoutoRebirth.Room.Database.Entities.CollectionEntity", "Collection")
                        .WithMany("Files")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("ImoutoRebirth.Room.Database.Entities.DestinationFolderEntity", b =>
                {
                    b.HasOne("ImoutoRebirth.Room.Database.Entities.CollectionEntity", "Collection")
                        .WithOne("DestinationFolder")
                        .HasForeignKey("ImoutoRebirth.Room.Database.Entities.DestinationFolderEntity", "CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("ImoutoRebirth.Room.Database.Entities.SourceFolderEntity", b =>
                {
                    b.HasOne("ImoutoRebirth.Room.Database.Entities.CollectionEntity", "Collection")
                        .WithMany("SourceFolders")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("ImoutoRebirth.Room.Database.Entities.CollectionEntity", b =>
                {
                    b.Navigation("DestinationFolder");

                    b.Navigation("Files");

                    b.Navigation("SourceFolders");
                });
#pragma warning restore 612, 618
        }
    }
}
