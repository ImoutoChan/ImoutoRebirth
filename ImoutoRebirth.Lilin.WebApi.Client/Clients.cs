//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace ImoutoRebirth.LilinService.WebApi.Client
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FilesClient 
    {
        private string _baseUrl = "";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public FilesClient(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = baseUrl;
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Retrieve file info with all tags and notes by id.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="WebApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileInfoResponse> GetFileInfoAsync(System.Guid fileId)
        {
            return GetFileInfoAsync(fileId, System.Threading.CancellationToken.None);
        }

        /// <summary>
        /// Retrieve file info with all tags and notes by id.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="WebApiException">A server side error occurred.</exception>
        public virtual FileInfoResponse GetFileInfo(System.Guid fileId)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetFileInfoAsync(fileId, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve file info with all tags and notes by id.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="WebApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileInfoResponse> GetFileInfoAsync(System.Guid fileId, System.Threading.CancellationToken cancellationToken)
        {
            if (fileId == null)
                throw new System.ArgumentNullException("fileId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Files/{fileId}");
            urlBuilder_.Replace("{fileId}", System.Uri.EscapeDataString(ConvertToString(fileId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FileInfoResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Check all parent and child tags in the database to see if there are related images for given md5 hash.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="WebApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<RelativeResponse>> GetRelativesAsync(string md5)
        {
            return GetRelativesAsync(md5, System.Threading.CancellationToken.None);
        }

        /// <summary>
        /// Check all parent and child tags in the database to see if there are related images for given md5 hash.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="WebApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.IReadOnlyCollection<RelativeResponse> GetRelatives(string md5)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetRelativesAsync(md5, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Check all parent and child tags in the database to see if there are related images for given md5 hash.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="WebApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<RelativeResponse>> GetRelativesAsync(string md5, System.Threading.CancellationToken cancellationToken)
        {
            if (md5 == null)
                throw new System.ArgumentNullException("md5");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Files/relatives?");
            urlBuilder_.Append(System.Uri.EscapeDataString("md5") + "=").Append(System.Uri.EscapeDataString(ConvertToString(md5, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IReadOnlyCollection<RelativeResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Check all parent and child tags in the database to see if there are related images for given md5 hash.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="WebApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<RelativeShortResponse>> GetRelativesBatchAsync(System.Collections.Generic.IReadOnlyCollection<string>? body)
        {
            return GetRelativesBatchAsync(body, System.Threading.CancellationToken.None);
        }

        /// <summary>
        /// Check all parent and child tags in the database to see if there are related images for given md5 hash.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="WebApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.IReadOnlyCollection<RelativeShortResponse> GetRelativesBatch(System.Collections.Generic.IReadOnlyCollection<string>? body)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetRelativesBatchAsync(body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Check all parent and child tags in the database to see if there are related images for given md5 hash.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="WebApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<RelativeShortResponse>> GetRelativesBatchAsync(System.Collections.Generic.IReadOnlyCollection<string>? body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Files/relatives/batch");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IReadOnlyCollection<RelativeShortResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get all files that's contains certain tags and values.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="WebApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<System.Guid>> GetFilesByTagsAsync(FilesSearchRequest? body)
        {
            return GetFilesByTagsAsync(body, System.Threading.CancellationToken.None);
        }

        /// <summary>
        /// Get all files that's contains certain tags and values.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="WebApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.IReadOnlyCollection<System.Guid> GetFilesByTags(FilesSearchRequest? body)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetFilesByTagsAsync(body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all files that's contains certain tags and values.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="WebApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<System.Guid>> GetFilesByTagsAsync(FilesSearchRequest? body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Files/search");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IReadOnlyCollection<System.Guid>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get count of files that's contains certain tags and values.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="WebApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<int> GetFilesCountByTagsAsync(FilesSearchRequest? body)
        {
            return GetFilesCountByTagsAsync(body, System.Threading.CancellationToken.None);
        }

        /// <summary>
        /// Get count of files that's contains certain tags and values.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="WebApiException">A server side error occurred.</exception>
        public virtual int GetFilesCountByTags(FilesSearchRequest? body)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetFilesCountByTagsAsync(body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get count of files that's contains certain tags and values.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="WebApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<int> GetFilesCountByTagsAsync(FilesSearchRequest? body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Files/search/count");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create FileTagInfo and bind tags to files with specified values.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="WebApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task BindTagsToFilesAsync(BindTagsRequest? body)
        {
            return BindTagsToFilesAsync(body, System.Threading.CancellationToken.None);
        }

        /// <summary>
        /// Create FileTagInfo and bind tags to files with specified values.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="WebApiException">A server side error occurred.</exception>
        public virtual void BindTagsToFiles(BindTagsRequest? body)
        {
            System.Threading.Tasks.Task.Run(async () => await BindTagsToFilesAsync(body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create FileTagInfo and bind tags to files with specified values.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="WebApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task BindTagsToFilesAsync(BindTagsRequest? body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Files/tags");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove tag from file with given value.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="WebApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task UnbindTagFromFileAsync(UnbindTagRequest? body)
        {
            return UnbindTagFromFileAsync(body, System.Threading.CancellationToken.None);
        }

        /// <summary>
        /// Remove tag from file with given value.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="WebApiException">A server side error occurred.</exception>
        public virtual void UnbindTagFromFile(UnbindTagRequest? body)
        {
            System.Threading.Tasks.Task.Run(async () => await UnbindTagFromFileAsync(body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove tag from file with given value.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="WebApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UnbindTagFromFileAsync(UnbindTagRequest? body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Files");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new WebApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new WebApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TagsClient 
    {
        private string _baseUrl = "";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public TagsClient(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = baseUrl;
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Search for tags.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="WebApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<TagResponse>> SearchAsync(TagsSearchRequest? body)
        {
            return SearchAsync(body, System.Threading.CancellationToken.None);
        }

        /// <summary>
        /// Search for tags.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="WebApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.IReadOnlyCollection<TagResponse> Search(TagsSearchRequest? body)
        {
            return System.Threading.Tasks.Task.Run(async () => await SearchAsync(body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for tags.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="WebApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<TagResponse>> SearchAsync(TagsSearchRequest? body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Tags/search");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IReadOnlyCollection<TagResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a tag.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="WebApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<TagResponse> CreateAsync(TagCreateRequest? body)
        {
            return CreateAsync(body, System.Threading.CancellationToken.None);
        }

        /// <summary>
        /// Create a tag.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="WebApiException">A server side error occurred.</exception>
        public virtual TagResponse Create(TagCreateRequest? body)
        {
            return System.Threading.Tasks.Task.Run(async () => await CreateAsync(body, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a tag.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="WebApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TagResponse> CreateAsync(TagCreateRequest? body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Tags");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TagResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new WebApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new WebApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TagTypesClient 
    {
        private string _baseUrl = "";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public TagTypesClient(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = baseUrl;
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Retrieve all tag types.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="WebApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<TagTypeResponse>> GetAllAsync()
        {
            return GetAllAsync(System.Threading.CancellationToken.None);
        }

        /// <summary>
        /// Retrieve all tag types.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="WebApiException">A server side error occurred.</exception>
        public virtual System.Collections.Generic.IReadOnlyCollection<TagTypeResponse> GetAll()
        {
            return System.Threading.Tasks.Task.Run(async () => await GetAllAsync(System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Retrieve all tag types.
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="WebApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.IReadOnlyCollection<TagTypeResponse>> GetAllAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/TagTypes");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IReadOnlyCollection<TagTypeResponse>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new WebApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new WebApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new WebApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new WebApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BindTagsRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public BindTagsRequest(System.Collections.Generic.IReadOnlyCollection<FileTagRequest> @fileTags, BindTagsRequestSameTagHandleStrategy @sameTagHandleStrategy)

        {

            this.FileTags = @fileTags;

            this.SameTagHandleStrategy = @sameTagHandleStrategy;

        }
        [System.Text.Json.Serialization.JsonPropertyName("fileTags")]
        public System.Collections.Generic.IReadOnlyCollection<FileTagRequest> FileTags { get; }

        [System.Text.Json.Serialization.JsonPropertyName("sameTagHandleStrategy")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public BindTagsRequestSameTagHandleStrategy SameTagHandleStrategy { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileInfoResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public FileInfoResponse(System.Collections.Generic.IReadOnlyCollection<FileNoteResponse>? @notes, System.Collections.Generic.IReadOnlyCollection<FileTagResponse>? @tags)

        {

            this.Tags = @tags;

            this.Notes = @notes;

        }
        [System.Text.Json.Serialization.JsonPropertyName("tags")]
        public System.Collections.Generic.IReadOnlyCollection<FileTagResponse>? Tags { get; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public System.Collections.Generic.IReadOnlyCollection<FileNoteResponse>? Notes { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileNoteResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public FileNoteResponse(System.Guid @fileId, NoteResponse? @note, FileNoteResponseSource @source, int? @sourceId)

        {

            this.FileId = @fileId;

            this.Note = @note;

            this.Source = @source;

            this.SourceId = @sourceId;

        }
        [System.Text.Json.Serialization.JsonPropertyName("fileId")]
        public System.Guid FileId { get; }

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public NoteResponse? Note { get; }

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public FileNoteResponseSource Source { get; }

        [System.Text.Json.Serialization.JsonPropertyName("sourceId")]
        public int? SourceId { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileTagRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public FileTagRequest(System.Guid @fileId, FileTagRequestSource @source, System.Guid @tagId, string? @value)

        {

            this.TagId = @tagId;

            this.FileId = @fileId;

            this.Source = @source;

            this.Value = @value;

        }
        [System.Text.Json.Serialization.JsonPropertyName("tagId")]
        public System.Guid TagId { get; }

        [System.Text.Json.Serialization.JsonPropertyName("fileId")]
        public System.Guid FileId { get; }

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public FileTagRequestSource Source { get; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public string? Value { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileTagResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public FileTagResponse(System.Guid @fileId, FileTagResponseSource @source, TagResponse? @tag, string? @value)

        {

            this.FileId = @fileId;

            this.Tag = @tag;

            this.Value = @value;

            this.Source = @source;

        }
        [System.Text.Json.Serialization.JsonPropertyName("fileId")]
        public System.Guid FileId { get; }

        [System.Text.Json.Serialization.JsonPropertyName("tag")]
        public TagResponse? Tag { get; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public string? Value { get; }

        [System.Text.Json.Serialization.JsonPropertyName("source")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public FileTagResponseSource Source { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FilesSearchRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public FilesSearchRequest(int? @count, int? @skip, System.Collections.Generic.IReadOnlyCollection<TagSearchEntryRequest> @tagSearchEntries)

        {

            this.TagSearchEntries = @tagSearchEntries;

            this.Count = @count;

            this.Skip = @skip;

        }
        [System.Text.Json.Serialization.JsonPropertyName("tagSearchEntries")]
        public System.Collections.Generic.IReadOnlyCollection<TagSearchEntryRequest> TagSearchEntries { get; }

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int? Count { get; }

        [System.Text.Json.Serialization.JsonPropertyName("skip")]
        public int? Skip { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NoteResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public NoteResponse(int @height, System.Guid @id, string? @label, int @positionFromLeft, int @positionFromTop, int @width)

        {

            this.Id = @id;

            this.Label = @label;

            this.PositionFromLeft = @positionFromLeft;

            this.PositionFromTop = @positionFromTop;

            this.Width = @width;

            this.Height = @height;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; }

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string? Label { get; }

        [System.Text.Json.Serialization.JsonPropertyName("positionFromLeft")]
        public int PositionFromLeft { get; }

        [System.Text.Json.Serialization.JsonPropertyName("positionFromTop")]
        public int PositionFromTop { get; }

        [System.Text.Json.Serialization.JsonPropertyName("width")]
        public int Width { get; }

        [System.Text.Json.Serialization.JsonPropertyName("height")]
        public int Height { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RelativeResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public RelativeResponse(FileInfoResponse? @fileInfo, RelativeResponseRelativesType @relativesType)

        {

            this.RelativesType = @relativesType;

            this.FileInfo = @fileInfo;

        }    /// <summary>
        /// Type of relative with md5 from request.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("relativesType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public RelativeResponseRelativesType RelativesType { get; }

        [System.Text.Json.Serialization.JsonPropertyName("fileInfo")]
        public FileInfoResponse? FileInfo { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RelativeShortResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public RelativeShortResponse(string? @hash, RelativeShortResponseRelativesType? @relativesType)

        {

            this.Hash = @hash;

            this.RelativesType = @relativesType;

        }    /// <summary>
        /// Requested md5 hash.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("hash")]
        public string? Hash { get; }

        /// <summary>
        /// Type of relative with md5 from request.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("relativesType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public RelativeShortResponseRelativesType? RelativesType { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TagCreateRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public TagCreateRequest(bool @hasValue, string @name, System.Collections.Generic.IReadOnlyCollection<string>? @synonyms, System.Guid @typeId)

        {

            this.TypeId = @typeId;

            this.Name = @name;

            this.HasValue = @hasValue;

            this.Synonyms = @synonyms;

        }
        [System.Text.Json.Serialization.JsonPropertyName("typeId")]
        public System.Guid TypeId { get; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; }

        [System.Text.Json.Serialization.JsonPropertyName("hasValue")]
        public bool HasValue { get; }

        [System.Text.Json.Serialization.JsonPropertyName("synonyms")]
        public System.Collections.Generic.IReadOnlyCollection<string>? Synonyms { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TagResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public TagResponse(int @count, bool @hasValue, System.Guid @id, string? @name, System.Collections.Generic.IReadOnlyCollection<string>? @synonyms, TagTypeResponse? @type)

        {

            this.Id = @id;

            this.Type = @type;

            this.Name = @name;

            this.HasValue = @hasValue;

            this.Synonyms = @synonyms;

            this.Count = @count;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public TagTypeResponse? Type { get; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; }

        [System.Text.Json.Serialization.JsonPropertyName("hasValue")]
        public bool HasValue { get; }

        [System.Text.Json.Serialization.JsonPropertyName("synonyms")]
        public System.Collections.Generic.IReadOnlyCollection<string>? Synonyms { get; }

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int Count { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TagSearchEntryRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public TagSearchEntryRequest(System.Guid @tagId, TagSearchEntryRequestTagSearchScope @tagSearchScope, string? @value)

        {

            this.TagId = @tagId;

            this.Value = @value;

            this.TagSearchScope = @tagSearchScope;

        }
        [System.Text.Json.Serialization.JsonPropertyName("tagId")]
        public System.Guid TagId { get; }

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public string? Value { get; }

        [System.Text.Json.Serialization.JsonPropertyName("tagSearchScope")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TagSearchEntryRequestTagSearchScope TagSearchScope { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TagTypeResponse
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public TagTypeResponse(int @color, System.Guid @id, string? @name)

        {

            this.Id = @id;

            this.Name = @name;

            this.Color = @color;

        }
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; }

        [System.Text.Json.Serialization.JsonPropertyName("color")]
        public int Color { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TagsSearchRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public TagsSearchRequest(int? @count, string? @searchPattern)

        {

            this.SearchPattern = @searchPattern;

            this.Count = @count;

        }
        [System.Text.Json.Serialization.JsonPropertyName("searchPattern")]
        public string? SearchPattern { get; }

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int? Count { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UnbindTagRequest
    {
        [System.Text.Json.Serialization.JsonConstructor]

        public UnbindTagRequest(FileTagRequest @fileTag)

        {

            this.FileTag = @fileTag;

        }
        [System.Text.Json.Serialization.JsonPropertyName("fileTag")]
        public FileTagRequest FileTag { get; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BindTagsRequestSameTagHandleStrategy
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ReplaceExistingValue")]
        ReplaceExistingValue = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AddNewFileTag")]
        AddNewFileTag = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FileNoteResponseSource
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Yandere")]
        Yandere = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Danbooru")]
        Danbooru = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Sankaku")]
        Sankaku = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Manual")]
        Manual = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FileTagRequestSource
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Yandere")]
        Yandere = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Danbooru")]
        Danbooru = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Sankaku")]
        Sankaku = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Manual")]
        Manual = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FileTagResponseSource
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Yandere")]
        Yandere = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Danbooru")]
        Danbooru = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Sankaku")]
        Sankaku = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Manual")]
        Manual = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RelativeResponseRelativesType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Child")]
        Child = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Parent")]
        Parent = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RelativeShortResponseRelativesType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Child")]
        Child = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Parent")]
        Parent = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TagSearchEntryRequestTagSearchScope
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Included")]
        Included = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Excluded")]
        Excluded = 1,

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WebApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string? Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public WebApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception? innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.9.0 (NJsonSchema v10.6.8.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WebApiException<TResult> : WebApiException
    {
        public TResult Result { get; private set; }

        public WebApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception? innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603