// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ImoutoRebirth.Lilin.WebApi.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Files.
    /// </summary>
    public static partial class FilesExtensions
    {
            /// <summary>
            /// Retrieve file info with all tags and notes by id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fileId'>
            /// </param>
            public static FileInfoResponse GetFileInfo(this IFiles operations, System.Guid fileId)
            {
                return operations.GetFileInfoAsync(fileId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve file info with all tags and notes by id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='fileId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<FileInfoResponse> GetFileInfoAsync(this IFiles operations, System.Guid fileId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFileInfoWithHttpMessagesAsync(fileId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Check all parent and child tags in the database to see if there are related
            /// images for given md5 hash.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='md5'>
            /// </param>
            public static IList<RelativeResponse> GetRelatives(this IFiles operations, string md5)
            {
                return operations.GetRelativesAsync(md5).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check all parent and child tags in the database to see if there are related
            /// images for given md5 hash.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='md5'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RelativeResponse>> GetRelativesAsync(this IFiles operations, string md5, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRelativesWithHttpMessagesAsync(md5, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all files that's contains certain tags and values.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static IList<System.Guid?> GetFilesByTags(this IFiles operations, FilesSearchRequest body = default(FilesSearchRequest))
            {
                return operations.GetFilesByTagsAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all files that's contains certain tags and values.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<System.Guid?>> GetFilesByTagsAsync(this IFiles operations, FilesSearchRequest body = default(FilesSearchRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFilesByTagsWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get count of files that's contains certain tags and values.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static int? GetFilesCountByTags(this IFiles operations, FilesSearchRequest body = default(FilesSearchRequest))
            {
                return operations.GetFilesCountByTagsAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get count of files that's contains certain tags and values.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<int?> GetFilesCountByTagsAsync(this IFiles operations, FilesSearchRequest body = default(FilesSearchRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFilesCountByTagsWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create FileTagInfo and bind tags to files with specified values.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void BindTagsToFiles(this IFiles operations, BindTagsRequest body = default(BindTagsRequest))
            {
                operations.BindTagsToFilesAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create FileTagInfo and bind tags to files with specified values.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BindTagsToFilesAsync(this IFiles operations, BindTagsRequest body = default(BindTagsRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BindTagsToFilesWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Remove tag from file with given value.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void UnbindTagFromFile(this IFiles operations, UnbindTagRequest body = default(UnbindTagRequest))
            {
                operations.UnbindTagFromFileAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove tag from file with given value.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task UnbindTagFromFileAsync(this IFiles operations, UnbindTagRequest body = default(UnbindTagRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.UnbindTagFromFileWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
