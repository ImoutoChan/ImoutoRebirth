// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace ImoutoRebirth.Room.HttpClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for CollectionFiles.
    /// </summary>
    public static partial class CollectionFilesExtensions
    {
            /// <summary>
            /// Retrieve all files by request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static IList<CollectionFileResponse> Search(this ICollectionFiles operations, CollectionFilesRequest body = default(CollectionFilesRequest))
            {
                return operations.SearchAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve all files by request.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CollectionFileResponse>> SearchAsync(this ICollectionFiles operations, CollectionFilesRequest body = default(CollectionFilesRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SearchWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve count of files by request.
            /// </summary>
            /// <remarks>
            /// Note that Skip and Count fields are ignored.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static int? Count(this ICollectionFiles operations, CollectionFilesRequest body = default(CollectionFilesRequest))
            {
                return operations.CountAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve count of files by request.
            /// </summary>
            /// <remarks>
            /// Note that Skip and Count fields are ignored.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<int?> CountAsync(this ICollectionFiles operations, CollectionFilesRequest body = default(CollectionFilesRequest), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CountWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Remove file with id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void Remove(this ICollectionFiles operations, System.Guid id)
            {
                operations.RemoveAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Remove file with id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveAsync(this ICollectionFiles operations, System.Guid id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
