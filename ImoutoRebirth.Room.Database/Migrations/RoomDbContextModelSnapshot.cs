// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ImoutoRebirth.Room.Database.Migrations
{
    [DbContext(typeof(RoomDbContext))]
    partial class RoomDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ImoutoRebirth.Room.Database.Entities.CollectionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("AddedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("ImoutoRebirth.Room.Database.Entities.CollectionFileEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("AddedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("boolean");

                    b.Property<string>("Md5")
                        .IsRequired()
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OriginalPath")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId");

                    b.HasIndex("IsRemoved");

                    b.HasIndex("Md5");

                    b.HasIndex("Path");

                    b.ToTable("CollectionFiles");
                });

            modelBuilder.Entity("ImoutoRebirth.Room.Database.Entities.DestinationFolderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("AddedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uuid");

                    b.Property<string>("FormatErrorSubfolder")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("!FormatError");

                    b.Property<string>("HashErrorSubfolder")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("!HashError");

                    b.Property<DateTimeOffset>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ShouldCreateSubfoldersByHash")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShouldRenameByHash")
                        .HasColumnType("boolean");

                    b.Property<string>("WithoutHashErrorSubfolder")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("!WithoutHashError");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId")
                        .IsUnique();

                    b.ToTable("DestinationFolders");
                });

            modelBuilder.Entity("ImoutoRebirth.Room.Database.Entities.SourceFolderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("AddedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ShouldAddTagFromFilename")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShouldCheckFormat")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShouldCheckHashFromName")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShouldCreateTagsFromSubfolders")
                        .HasColumnType("boolean");

                    b.Property<string>("SupportedExtensions")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId");

                    b.ToTable("SourceFolders");
                });

            modelBuilder.Entity("ImoutoRebirth.Room.Database.Entities.CollectionFileEntity", b =>
                {
                    b.HasOne("ImoutoRebirth.Room.Database.Entities.CollectionEntity", "Collection")
                        .WithMany("Files")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ImoutoRebirth.Room.Database.Entities.DestinationFolderEntity", b =>
                {
                    b.HasOne("ImoutoRebirth.Room.Database.Entities.CollectionEntity", "Collection")
                        .WithOne("DestinationFolder")
                        .HasForeignKey("ImoutoRebirth.Room.Database.Entities.DestinationFolderEntity", "CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ImoutoRebirth.Room.Database.Entities.SourceFolderEntity", b =>
                {
                    b.HasOne("ImoutoRebirth.Room.Database.Entities.CollectionEntity", "Collection")
                        .WithMany("SourceFolders")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
